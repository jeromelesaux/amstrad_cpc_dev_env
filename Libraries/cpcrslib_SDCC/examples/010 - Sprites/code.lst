                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.5.2 #9293 (MINGW64)
                              4 ; This file was generated Tue Sep 15 21:15:58 2015
                              5 ;--------------------------------------------------------
                              6 	.module code
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _data
                             14 	.globl _cpc_AnyKeyPressed
                             15 	.globl _cpc_PrintGphStrXYM1
                             16 	.globl _cpc_GetSp
                             17 	.globl _cpc_PutSpXOR
                             18 	.globl _cpc_PutSp
                             19 	.globl _cpc_GetScrAddress
                             20 	.globl _cpc_SetModo
                             21 ;--------------------------------------------------------
                             22 ; special function registers
                             23 ;--------------------------------------------------------
                             24 ;--------------------------------------------------------
                             25 ; ram data
                             26 ;--------------------------------------------------------
                             27 	.area _DATA
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area _INITIALIZED
                             32 ;--------------------------------------------------------
                             33 ; absolute external ram data
                             34 ;--------------------------------------------------------
                             35 	.area _DABS (ABS)
                             36 ;--------------------------------------------------------
                             37 ; global & static initialisations
                             38 ;--------------------------------------------------------
                             39 	.area _HOME
                             40 	.area _GSINIT
                             41 	.area _GSFINAL
                             42 	.area _GSINIT
                             43 ;--------------------------------------------------------
                             44 ; Home
                             45 ;--------------------------------------------------------
                             46 	.area _HOME
                             47 	.area _HOME
                             48 ;--------------------------------------------------------
                             49 ; code
                             50 ;--------------------------------------------------------
                             51 	.area _CODE
                             52 ;code.c:5: void data(void){
                             53 ;	---------------------------------
                             54 ; Function data
                             55 ; ---------------------------------
   0000                      56 _data::
                             57 ;code.c:32: __endasm;
   0000                      58 	_sprite:
   0000 00 60 00             59 	.db #0x00,#0x60,#0x00
   0003 00 F0 00             60 	.db #0x00,#0xF0,#0x00
   0006 10 D0 C0             61 	.db #0x10,#0xD0,#0xC0
   0009 10 F0 E0             62 	.db #0x10,#0xF0,#0xE0
   000C 10 F0 E0             63 	.db #0x10,#0xF0,#0xE0
   000F 22 E4 C0             64 	.db #0x22,#0xE4,#0xC0
   0012 33 66 00             65 	.db #0x33,#0x66,#0x00
   0015 33 77 00             66 	.db #0x33,#0x77,#0x00
   0018 33 77 00             67 	.db #0x33,#0x77,#0x00
   001B 33 CC 00             68 	.db #0x33,#0xCC,#0x00
   001E 11 EE 00             69 	.db #0x11,#0xEE,#0x00
   0021 00 FF 00             70 	.db #0x00,#0xFF,#0x00
   0024 1F 33 00             71 	.db #0x1F,#0x33,#0x00
   0027 0D 03 0E             72 	.db #0x0D,#0x03,#0x0E
   002A 0E 0B 0D             73 	.db #0x0E,#0x0B,#0x0D
   002D 05 09 0A             74 	.db #0x05,#0x09,#0x0A
   0030                      75 	_buffer:
   0030 00 00 00 00 00 00    76 	.db #0,#0,#0,#0,#0,#0,#0,#0
        00 00
   0038 00 00 00 00 00 00    77 	.db #0,#0,#0,#0,#0,#0,#0,#0
        00 00
   0040 00 00 00 00 00 00    78 	.db #0,#0,#0,#0,#0,#0,#0,#0
        00 00
   0048 00 00 00 00 00 00    79 	.db #0,#0,#0,#0,#0,#0,#0,#0
        00 00
   0050 00 00 00 00 00 00    80 	.db #0,#0,#0,#0,#0,#0,#0,#0
        00 00
   0058 00 00 00 00 00 00    81 	.db #0,#0,#0,#0,#0,#0,#0,#0
        00 00
   0060 C9            [10]   82 	ret
                             83 ;code.c:36: main(){
                             84 ;	---------------------------------
                             85 ; Function main
                             86 ; ---------------------------------
   0061                      87 _main::
   0061 DD E5         [15]   88 	push	ix
   0063 DD 21 00 00   [14]   89 	ld	ix,#0
   0067 DD 39         [15]   90 	add	ix,sp
   0069 21 D0 FF      [10]   91 	ld	hl,#-48
   006C 39            [11]   92 	add	hl,sp
   006D F9            [ 6]   93 	ld	sp,hl
                             94 ;code.c:38: cpc_SetModo(1); //rutina hardware, se restaura la situación anterior al terminar la ejecución del programa
   006E 2E 01         [ 7]   95 	ld	l,#0x01
   0070 CDr00r00      [17]   96 	call	_cpc_SetModo
                             97 ;code.c:40: cpc_PrintGphStrXYM1("1;PUTS;A;SPRITE;IN;THE;SCREEN",0,8*23);
   0073 11r82r01      [10]   98 	ld	de,#___str_0
   0076 21 00 B8      [10]   99 	ld	hl,#0xB800
   0079 E5            [11]  100 	push	hl
   007A D5            [11]  101 	push	de
   007B CDr00r00      [17]  102 	call	_cpc_PrintGphStrXYM1
                            103 ;code.c:41: cpc_PrintGphStrXYM1("PRESS;ANY;KEY",0,8*24);
   007E 11rA0r01      [10]  104 	ld	de,#___str_1
   0081 21 00 C0      [10]  105 	ld	hl,#0xC000
   0084 E5            [11]  106 	push	hl
   0085 D5            [11]  107 	push	de
   0086 CDr00r00      [17]  108 	call	_cpc_PrintGphStrXYM1
                            109 ;code.c:42: while (!cpc_AnyKeyPressed()){}
   0089                     110 00101$:
   0089 CDr00r00      [17]  111 	call	_cpc_AnyKeyPressed
   008C 7C            [ 4]  112 	ld	a,h
   008D B5            [ 4]  113 	or	a,l
   008E 28 F9         [12]  114 	jr	Z,00101$
                            115 ;code.c:43: cpc_PutSp(sprite,16,3,0xc19b);
   0090 11r00r00      [10]  116 	ld	de,#_sprite
   0093 21 9B C1      [10]  117 	ld	hl,#0xC19B
   0096 E5            [11]  118 	push	hl
   0097 21 10 03      [10]  119 	ld	hl,#0x0310
   009A E5            [11]  120 	push	hl
   009B D5            [11]  121 	push	de
   009C CDr00r00      [17]  122 	call	_cpc_PutSp
                            123 ;code.c:45: cpc_PrintGphStrXYM1("2;CAPTURES;A;SCREEN;AREA;;;;;",0,8*23);
   009F 11rAEr01      [10]  124 	ld	de,#___str_2
   00A2 21 00 B8      [10]  125 	ld	hl,#0xB800
   00A5 E5            [11]  126 	push	hl
   00A6 D5            [11]  127 	push	de
   00A7 CDr00r00      [17]  128 	call	_cpc_PrintGphStrXYM1
                            129 ;code.c:46: cpc_PrintGphStrXYM1("PRESS;ANY;KEY",0,8*24);
   00AA 11rA0r01      [10]  130 	ld	de,#___str_1
   00AD 21 00 C0      [10]  131 	ld	hl,#0xC000
   00B0 E5            [11]  132 	push	hl
   00B1 D5            [11]  133 	push	de
   00B2 CDr00r00      [17]  134 	call	_cpc_PrintGphStrXYM1
                            135 ;code.c:47: while (!cpc_AnyKeyPressed()){}
   00B5                     136 00104$:
   00B5 CDr00r00      [17]  137 	call	_cpc_AnyKeyPressed
   00B8 7C            [ 4]  138 	ld	a,h
   00B9 B5            [ 4]  139 	or	a,l
   00BA 28 F9         [12]  140 	jr	Z,00104$
                            141 ;code.c:48: cpc_GetSp(buffer,16,3,0xc19c);
   00BC 21 00 00      [10]  142 	ld	hl,#0x0000
   00BF 39            [11]  143 	add	hl,sp
   00C0 EB            [ 4]  144 	ex	de,hl
   00C1 4B            [ 4]  145 	ld	c, e
   00C2 42            [ 4]  146 	ld	b, d
   00C3 D5            [11]  147 	push	de
   00C4 21 9C C1      [10]  148 	ld	hl,#0xC19C
   00C7 E5            [11]  149 	push	hl
   00C8 21 10 03      [10]  150 	ld	hl,#0x0310
   00CB E5            [11]  151 	push	hl
   00CC C5            [11]  152 	push	bc
   00CD CDr00r00      [17]  153 	call	_cpc_GetSp
   00D0 D1            [10]  154 	pop	de
                            155 ;code.c:49: cpc_PrintGphStrXYM1("3;PRINTS;CAPTURED;AREA",0,8*23);
   00D1 01rCCr01      [10]  156 	ld	bc,#___str_3
   00D4 D5            [11]  157 	push	de
   00D5 21 00 B8      [10]  158 	ld	hl,#0xB800
   00D8 E5            [11]  159 	push	hl
   00D9 C5            [11]  160 	push	bc
   00DA CDr00r00      [17]  161 	call	_cpc_PrintGphStrXYM1
   00DD D1            [10]  162 	pop	de
                            163 ;code.c:50: cpc_PrintGphStrXYM1("PRESS;ANY;KEY",0,8*24);
   00DE 01rA0r01      [10]  164 	ld	bc,#___str_1
   00E1 D5            [11]  165 	push	de
   00E2 21 00 C0      [10]  166 	ld	hl,#0xC000
   00E5 E5            [11]  167 	push	hl
   00E6 C5            [11]  168 	push	bc
   00E7 CDr00r00      [17]  169 	call	_cpc_PrintGphStrXYM1
   00EA D1            [10]  170 	pop	de
                            171 ;code.c:51: while (!cpc_AnyKeyPressed()){}
   00EB                     172 00107$:
   00EB D5            [11]  173 	push	de
   00EC CDr00r00      [17]  174 	call	_cpc_AnyKeyPressed
   00EF D1            [10]  175 	pop	de
   00F0 7C            [ 4]  176 	ld	a,h
   00F1 B5            [ 4]  177 	or	a,l
   00F2 28 F7         [12]  178 	jr	Z,00107$
                            179 ;code.c:53: cpc_PutSp(buffer,16,3,0xc19f);
   00F4 21 9F C1      [10]  180 	ld	hl,#0xC19F
   00F7 E5            [11]  181 	push	hl
   00F8 21 10 03      [10]  182 	ld	hl,#0x0310
   00FB E5            [11]  183 	push	hl
   00FC D5            [11]  184 	push	de
   00FD CDr00r00      [17]  185 	call	_cpc_PutSp
                            186 ;code.c:55: cpc_PrintGphStrXYM1("4;PUTS;A SPRITE;IN;XOR;MODE",0,8*23);
   0100 11rE3r01      [10]  187 	ld	de,#___str_4
   0103 21 00 B8      [10]  188 	ld	hl,#0xB800
   0106 E5            [11]  189 	push	hl
   0107 D5            [11]  190 	push	de
   0108 CDr00r00      [17]  191 	call	_cpc_PrintGphStrXYM1
                            192 ;code.c:56: cpc_PrintGphStrXYM1("PRESS;ANY;KEY",0,8*24);
   010B 11rA0r01      [10]  193 	ld	de,#___str_1
   010E 21 00 C0      [10]  194 	ld	hl,#0xC000
   0111 E5            [11]  195 	push	hl
   0112 D5            [11]  196 	push	de
   0113 CDr00r00      [17]  197 	call	_cpc_PrintGphStrXYM1
                            198 ;code.c:57: while (!cpc_AnyKeyPressed()){}
   0116                     199 00110$:
   0116 CDr00r00      [17]  200 	call	_cpc_AnyKeyPressed
   0119 7C            [ 4]  201 	ld	a,h
   011A B5            [ 4]  202 	or	a,l
   011B 28 F9         [12]  203 	jr	Z,00110$
                            204 ;code.c:58: cpc_PutSpXOR(sprite,16,3,cpc_GetScrAddress(100,50));
   011D 21 64 32      [10]  205 	ld	hl,#0x3264
   0120 E5            [11]  206 	push	hl
   0121 CDr00r00      [17]  207 	call	_cpc_GetScrAddress
   0124 11r00r00      [10]  208 	ld	de,#_sprite
   0127 E5            [11]  209 	push	hl
   0128 21 10 03      [10]  210 	ld	hl,#0x0310
   012B E5            [11]  211 	push	hl
   012C D5            [11]  212 	push	de
   012D CDr00r00      [17]  213 	call	_cpc_PutSpXOR
                            214 ;code.c:59: cpc_PrintGphStrXYM1("5;SPRITE;PRINTED;AGAIN;IN;XOR;MODE",0,8*23);
   0130 11rFFr01      [10]  215 	ld	de,#___str_5
   0133 21 00 B8      [10]  216 	ld	hl,#0xB800
   0136 E5            [11]  217 	push	hl
   0137 D5            [11]  218 	push	de
   0138 CDr00r00      [17]  219 	call	_cpc_PrintGphStrXYM1
                            220 ;code.c:60: cpc_PrintGphStrXYM1("PRESS;ANY;KEY",0,8*24);
   013B 11rA0r01      [10]  221 	ld	de,#___str_1
   013E 21 00 C0      [10]  222 	ld	hl,#0xC000
   0141 E5            [11]  223 	push	hl
   0142 D5            [11]  224 	push	de
   0143 CDr00r00      [17]  225 	call	_cpc_PrintGphStrXYM1
                            226 ;code.c:61: while (!cpc_AnyKeyPressed()){}
   0146                     227 00113$:
   0146 CDr00r00      [17]  228 	call	_cpc_AnyKeyPressed
   0149 7C            [ 4]  229 	ld	a,h
   014A B5            [ 4]  230 	or	a,l
   014B 28 F9         [12]  231 	jr	Z,00113$
                            232 ;code.c:62: cpc_PutSpXOR(sprite,16,3,cpc_GetScrAddress(100,50));
   014D 21 64 32      [10]  233 	ld	hl,#0x3264
   0150 E5            [11]  234 	push	hl
   0151 CDr00r00      [17]  235 	call	_cpc_GetScrAddress
   0154 11r00r00      [10]  236 	ld	de,#_sprite
   0157 E5            [11]  237 	push	hl
   0158 21 10 03      [10]  238 	ld	hl,#0x0310
   015B E5            [11]  239 	push	hl
   015C D5            [11]  240 	push	de
   015D CDr00r00      [17]  241 	call	_cpc_PutSpXOR
                            242 ;code.c:64: cpc_PrintGphStrXYM1(";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",0,8*23);
   0160 11r22r02      [10]  243 	ld	de,#___str_6
   0163 21 00 B8      [10]  244 	ld	hl,#0xB800
   0166 E5            [11]  245 	push	hl
   0167 D5            [11]  246 	push	de
   0168 CDr00r00      [17]  247 	call	_cpc_PrintGphStrXYM1
                            248 ;code.c:65: cpc_PrintGphStrXYM1("THE;END;;;;;;",0,8*24);
   016B 11r45r02      [10]  249 	ld	de,#___str_7
   016E 21 00 C0      [10]  250 	ld	hl,#0xC000
   0171 E5            [11]  251 	push	hl
   0172 D5            [11]  252 	push	de
   0173 CDr00r00      [17]  253 	call	_cpc_PrintGphStrXYM1
                            254 ;code.c:66: while(!(cpc_AnyKeyPressed())){}
   0176                     255 00116$:
   0176 CDr00r00      [17]  256 	call	_cpc_AnyKeyPressed
   0179 7C            [ 4]  257 	ld	a,h
   017A B5            [ 4]  258 	or	a,l
   017B 28 F9         [12]  259 	jr	Z,00116$
   017D DD F9         [10]  260 	ld	sp, ix
   017F DD E1         [14]  261 	pop	ix
   0181 C9            [10]  262 	ret
   0182                     263 ___str_0:
   0182 31 3B 50 55 54 53   264 	.ascii "1;PUTS;A;SPRITE;IN;THE;SCREEN"
        3B 41 3B 53 50 52
        49 54 45 3B 49 4E
        3B 54 48 45 3B 53
        43 52 45 45 4E
   019F 00                  265 	.db 0x00
   01A0                     266 ___str_1:
   01A0 50 52 45 53 53 3B   267 	.ascii "PRESS;ANY;KEY"
        41 4E 59 3B 4B 45
        59
   01AD 00                  268 	.db 0x00
   01AE                     269 ___str_2:
   01AE 32 3B 43 41 50 54   270 	.ascii "2;CAPTURES;A;SCREEN;AREA;;;;;"
        55 52 45 53 3B 41
        3B 53 43 52 45 45
        4E 3B 41 52 45 41
        3B 3B 3B 3B 3B
   01CB 00                  271 	.db 0x00
   01CC                     272 ___str_3:
   01CC 33 3B 50 52 49 4E   273 	.ascii "3;PRINTS;CAPTURED;AREA"
        54 53 3B 43 41 50
        54 55 52 45 44 3B
        41 52 45 41
   01E2 00                  274 	.db 0x00
   01E3                     275 ___str_4:
   01E3 34 3B 50 55 54 53   276 	.ascii "4;PUTS;A SPRITE;IN;XOR;MODE"
        3B 41 20 53 50 52
        49 54 45 3B 49 4E
        3B 58 4F 52 3B 4D
        4F 44 45
   01FE 00                  277 	.db 0x00
   01FF                     278 ___str_5:
   01FF 35 3B 53 50 52 49   279 	.ascii "5;SPRITE;PRINTED;AGAIN;IN;XOR;MODE"
        54 45 3B 50 52 49
        4E 54 45 44 3B 41
        47 41 49 4E 3B 49
        4E 3B 58 4F 52 3B
        4D 4F 44 45
   0221 00                  280 	.db 0x00
   0222                     281 ___str_6:
   0222 3B 3B 3B 3B 3B 3B   282 	.ascii ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
        3B 3B 3B 3B 3B 3B
        3B 3B 3B 3B 3B 3B
        3B 3B 3B 3B 3B 3B
        3B 3B 3B 3B 3B 3B
        3B 3B 3B 3B
   0244 00                  283 	.db 0x00
   0245                     284 ___str_7:
   0245 54 48 45 3B 45 4E   285 	.ascii "THE;END;;;;;;"
        44 3B 3B 3B 3B 3B
        3B
   0252 00                  286 	.db 0x00
                            287 	.area _CODE
                            288 	.area _INITIALIZER
                            289 	.area _CABS (ABS)
